package AppendEntryRpc

import (
	"log"
	"raft/internal/rpcs"
	"raft/internal/raftstate"
	"strconv"
	"raft/pkg/rpcEncoding/out/protobuf"

	"google.golang.org/protobuf/proto"
)

type AppendEntryRpc struct {
    pMex protobuf.AppendEntriesRequest
}

func GenerateHearthbeat(state raftstate.State) rpcs.Rpc {
	var entries []protobuf.LogEntry = state.GetEntries()
	prevLogIndex := len(entries)
    var prevLogTerm  uint64 = 0
    if prevLogIndex > 0 {
        prevLogIndex-=2
        prevLogTerm = entries[prevLogIndex].GetTerm()
    }

    var app = &AppendEntryRpc{
        pMex: protobuf.AppendEntriesRequest{
            Term:         state.GetTerm(),
            LeaderId:     state.GetId(),
            PrevLogIndex: uint64(prevLogIndex),
            PrevLogTerm:  prevLogTerm,
            Entries:      make([]*protobuf.LogEntry, 0),
            LeaderCommit: state.GetCommitIndex(),
        },
    }

    log.Print("hearthbit generated by ", state.GetId()," : ", app.ToString())

    return app
}

func NewAppendEntryRPC(term uint64, leaderId string, prevLogIndex uint64,
	prevLogTerm uint64, entries []*protobuf.LogEntry,
	leaderCommit int64) rpcs.Rpc {
    return &AppendEntryRpc{
        pMex: protobuf.AppendEntriesRequest{
            Term: term,
            LeaderId: leaderId,
            PrevLogIndex: prevLogIndex,
            PrevLogTerm: prevLogTerm,
            Entries: entries,
            LeaderCommit : leaderCommit,
        },
    }
}

// GetId implements rpcs.Rpc.
func (this *AppendEntryRpc) GetId() string {
    return this.pMex.LeaderId
}


// Manage implements rpcs.Rpc.
func (this *AppendEntryRpc) Execute(state *raftstate.State) *rpcs.Rpc {
    panic("dummy implementation")
}

// ToString implements rpcs.Rpc.
func (this *AppendEntryRpc) ToString() string {
	var entries string
	for _, el := range this.pMex.Entries{
		entries += el.String()
	}
	return "{term : " + strconv.Itoa(int(this.GetTerm())) + ", leaderId: " + this.GetId()+ ", prevLogIndex: " + strconv.Itoa(int(this.pMex.PrevLogIndex)) + ", prevLogTerm: " + strconv.Itoa(int(this.pMex.PrevLogIndex)) + ", entries: " + entries + ", leaderCommit: " + strconv.Itoa(int(this.pMex.LeaderCommit)) + "}"
}

func (this *AppendEntryRpc) GetTerm() uint64 {
    return this.pMex.Term
}

func (this *AppendEntryRpc) Encode() ([]byte, error) {

    var mess []byte
    var err error
	mess, err = proto.Marshal(&(*this).pMex)
    if err != nil {
        log.Panicln("error in Encoding Append Entry: ", err)
    }
	return mess, err
}
func (this *AppendEntryRpc) Decode(rawMex []byte) (error) {
	err := proto.Unmarshal(rawMex, &this.pMex)

    if err != nil {
        log.Panicln("error in Decoding Append Entry: ", err)
    }
	return err
}
