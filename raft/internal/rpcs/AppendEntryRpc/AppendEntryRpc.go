package AppendEntryRpc

import (
	"log"
	"raft/internal/raftstate"
	"raft/internal/rpcs"
	app_resp "raft/internal/rpcs/AppendResponse"
	"strconv"
	"math"
	"raft/pkg/rpcEncoding/out/protobuf"

	"google.golang.org/protobuf/proto"
)

type AppendEntryRpc struct {
	pMex protobuf.AppendEntriesRequest
}

func GenerateHearthbeat(state raftstate.State) rpcs.Rpc {
	var entries []protobuf.LogEntry = state.GetEntries()
	prevLogIndex := len(entries)
	var prevLogTerm uint64 = 0
	if prevLogIndex > 0 {
		prevLogIndex -= 2
		prevLogTerm = entries[prevLogIndex].GetTerm()
	}

	var app = &AppendEntryRpc{
		pMex: protobuf.AppendEntriesRequest{
			Term:         state.GetTerm(),
			LeaderId:     state.GetId(),
			PrevLogIndex: uint64(prevLogIndex),
			PrevLogTerm:  prevLogTerm,
			Entries:      make([]*protobuf.LogEntry, 0),
			LeaderCommit: state.GetCommitIndex(),
		},
	}

	log.Print("hearthbit generated by ", state.GetId(), " : ", app.ToString())

	return app
}

func NewAppendEntryRPC(term uint64, leaderId string, prevLogIndex uint64,
	prevLogTerm uint64, entries []*protobuf.LogEntry,
	leaderCommit uint64) rpcs.Rpc {
	return &AppendEntryRpc{
		pMex: protobuf.AppendEntriesRequest{
			Term:         term,
			LeaderId:     leaderId,
			PrevLogIndex: prevLogIndex,
			PrevLogTerm:  prevLogTerm,
			Entries:      entries,
			LeaderCommit: leaderCommit,
		},
	}
}

// GetId implements rpcs.Rpc.
func (this *AppendEntryRpc) GetId() string {
	return this.pMex.LeaderId
}

func checkConsistency(prevLogIndex uint64, prevLogTerm uint64, state raftstate.State) bool {
	return state.GetEntries()[prevLogIndex].GetTerm() == prevLogTerm
}

// Manage implements rpcs.Rpc.
func (this *AppendEntryRpc) Execute(state *raftstate.State) *rpcs.Rpc {
	(*state).StopElectionTimeout()
	defer (*state).StartElectionTimeout()

	var role = (*state).GetRole()
	var id = (*state).GetId()
	var term = (*state).GetTerm()
	var error uint64
	var success bool

	if role != raftstate.FOLLOWER {
		(*state).SetRole(raftstate.FOLLOWER)
	}

	if this.pMex.GetTerm() < term {

		success = false
		return respondeAppend(id, success, term, -1)
	
  } else if checkConsistency(this.pMex.GetPrevLogIndex(), this.pMex.GetPrevLogTerm(), *state) {
		
    success = false
		error = this.pMex.GetPrevLogIndex()
		return respondeAppend(id, success, term, int(error))
	
  } else {
		
    (*state).AppendEntries(this.pMex.GetEntries(), int(this.pMex.PrevLogIndex))
		success = true
    var leaderCommit uint64 = this.pMex.GetLeaderCommit()
    var lastNewEntryIdx uint64 = uint64(len((*state).GetEntries())-1)
    if leaderCommit > (*state).GetCommitIndex() {
      if leaderCommit > lastNewEntryIdx {
        (*state).SetCommitIndex(lastNewEntryIdx)
      } else {
        (*state).SetCommitIndex(leaderCommit)
      }
    }
		return respondeAppend(id, success, term, -1)
	
  }
}

func respondeAppend(id string, success bool, term uint64, error int) *rpcs.Rpc {
	var appendEntryResp rpcs.Rpc = app_resp.NewAppendResponseRPC(
			id,
			success,
			term,
			error)
	return &appendEntryResp
}

// ToString implements rpcs.Rpc.
func (this *AppendEntryRpc) ToString() string {
	var entries string
	for _, el := range this.pMex.Entries {
		entries += el.String()
	}
	return "{term : " + strconv.Itoa(int(this.GetTerm())) + ", leaderId: " + this.GetId() + ", prevLogIndex: " + strconv.Itoa(int(this.pMex.PrevLogIndex)) + ", prevLogTerm: " + strconv.Itoa(int(this.pMex.PrevLogIndex)) + ", entries: " + entries + ", leaderCommit: " + strconv.Itoa(int(this.pMex.LeaderCommit)) + "}"
}

func (this *AppendEntryRpc) GetTerm() uint64 {
	return this.pMex.Term
}

func (this *AppendEntryRpc) Encode() ([]byte, error) {

	var mess []byte
	var err error
	mess, err = proto.Marshal(&(*this).pMex)
	return mess, err
}
func (this *AppendEntryRpc) Decode(rawMex []byte) error {
	var pb = new(protobuf.AppendEntriesRequest)
	err := proto.Unmarshal(rawMex, pb)

	if err != nil {
		this.pMex.Term = pb.Term
		this.pMex.PrevLogIndex = pb.PrevLogIndex
		this.pMex.PrevLogTerm = pb.PrevLogTerm
		this.pMex.CommitIndex = pb.CommitIndex
		this.pMex.LeaderId = pb.LeaderId
		this.pMex.Entries = pb.Entries
		this.pMex.LeaderCommit = pb.LeaderCommit
	}

	return err
}
